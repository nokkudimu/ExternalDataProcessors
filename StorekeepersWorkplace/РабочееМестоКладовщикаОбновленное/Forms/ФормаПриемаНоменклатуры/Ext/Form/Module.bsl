
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ЭтаФорма.Параметры 
	ЗаполнитьОжидаемуюНоменклатуру(ЭтаФорма.Параметры);
	Склады = ЭтаФорма.Параметры.Склад;
	Организации = ЭтаФорма.Параметры.Организация;
	СкладОтправитель = ЭтаФорма.Параметры.СкладОтправитель; 
	Распоряжение = ЭтаФорма.Параметры.ПеремещениеТоваров;
	//Сообщить("test");	 
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьОжидаемуюНоменклатуру(Данные)	

	РасходныйОрдерНаТовары = Данные.РасходныйОрдер.ПолучитьОбъект();
	Для каждого СтрИзДока Из РасходныйОрдерНаТовары.ОтгружаемыеТовары Цикл
	
		СтрТЧ = Объект.ОжидаемаяНоменклатура.Добавить();
		СтрТЧ.Штрихкод = НайтиШтрихкодНоменклатуры(СтрИзДока.Номенклатура, СтрИзДока.Характеристика);
		СтрТЧ.Артикул = СтрИзДока.Номенклатура.Артикул;
		СтрТЧ.Номенклатура = СтрИзДока.Номенклатура; 
		СтрТЧ.Характеристика = СтрИзДока.Характеристика; 
		СтрТЧ.Количество = СтрИзДока.Количество;
		СтрТЧ.ЕдиницаИзмерения = СтрИзДока.Номенклатура.ЕдиницаИзмерения; 
		СтрТЧ.КоличествоБрака = 0;
		СтрТЧ.ПричинаБрака = Справочники.ПХ_ПричиныБрака.ПустаяСсылка();
		СтрТЧ.ПеремещениеТоваров = Данные.ПеремещениеТоваров; 
	
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция НайтиШтрихкодНоменклатуры(Номенклатура, Характеристика)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	               |	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";                          
	
	Результат = Запрос.Выполнить().Выгрузить(); 
	Если Результат.Количество() <> 1 Тогда
	
		Возврат Неопределено;
		
	Иначе
		
		Возврат Результат[0].Штрихкод;
	
	КонецЕсли;

КонецФункции // ()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Ожидаемая номенклатура:'"),, "Ожидаемая номенклатура заполнена!", БиблиотекаКартинок.BCGЗвезда);	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСписокОжидаемойНоменклатуры(Команда)
	Если Объект.ОжидаемаяНоменклатура.Количество() = 0 Тогда
	
		Сообщить("Что-то пошло не так при заполнении номенклатуры из документа 'Расходный ордер на товары'. Вернитесь на начальную страницу и перевыберите документ.");	
	    Возврат;
		
	КонецЕсли;
	Для каждого СтрОжидН Из Объект.ОжидаемаяНоменклатура Цикл
	
		СтрОтскН = Объект.ОтсканированнаяНоменклатура.Добавить();
		СтрОтскН.Штрихкод = СтрОжидН.Штрихкод; 
		СтрОтскН.Артикул = СтрОжидН.Артикул;
		СтрОтскН.Номенклатура = СтрОжидН.Номенклатура;
		СтрОтскН.Характеристика = СтрОжидН.Характеристика;
		СтрОтскН.Количество = СтрОжидН.Количество;
        СтрОтскН.ЕдиницаИзмерения = СтрОжидН.ЕдиницаИзмерения;
		СтрОтскН.КоличествоБрака = СтрОжидН.КоличествоБрака;
		СтрОтскН.ПричинаБрака = СтрОжидН.ПричинаБрака;
	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуБрака(Команда)
	Если Объект.ОтсканированнаяНоменклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПользователяПричинаБрака", ЭтаФорма);
	ОткрытьФорму("Справочник.ПХ_ПричиныБрака.ФормаВыбора", , , , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПользователяПричинаБрака(Выбор, ДП) Экспорт
	Если НЕ Выбор = Неопределено Тогда
		Для каждого СтрТЧ Из Объект.ОтсканированнаяНоменклатура Цикл
			СтрТЧ.ПричинаБрака = Выбор;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоБрака(Команда)
	Для каждого СтрТЧ Из Объект.ОтсканированнаяНоменклатура Цикл
		СтрТЧ.КоличествоБрака = СтрТЧ.Количество;	
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// проверяем, какая вкладка открыта у пользователя
	// если "Прием товаров"
	// 1) Обрабатываем штрихкод
	// 2) Проверяем, заполнены ли необходимые поля
	// 3) Проверяем, выбран ли документ перемещения
	// 4) Проверяем, есть ли номенклатура с таким штрихкодом
	// Если нет, то выдаем ошибку: такой номенклатуры не существует / отсканирован неверный штрихкод
	// 5) Проверяем, соответствует ли отсканированная номенклатура номенклатуре в документе перемещения
	// Если нет, то выдаем предупреждение с сообщением: "Номенклатура не совпадает с номенклатурой в документе 'Перемещение товаров', Продолжить?"
	// если "Формирование возврата"
	// 1) Обрабатываем штрихкод
	// Ищем номенклатуру по штрихкоду, если такой номенклатуры не существует, проверяем, существует ли упаковочный лист с таким штрихкодом в комментарии.
	// Если нет, то выдаем ошибку: "Таких номенклатуры или упаковочного листа не существует!"
	// Если отсканированна номенклатура:
	// 2) Проверяем, заполнены ли необходимые поля
	// 3) Проверяем, заполнена ли ТЧ "Товары поставщика на складе"
	// 4) Проверяем, соответствует ли отсканированная номенклатура номенклатуре в ТЧ "Товары поставщика на складе"
	// Если нет, то выдаем ошибку "Данная номенклатура не принадлежит поставщику --> ."
	// Если отсканирован упаковочный лист:
	// 1) Открываем документ "Упаковочный лист"  
	Если Событие = "Штрихкод" Тогда
			ОбработкаСканированияПриемТоваров(Данные);	
	Иначе
		Сообщить("Отсканирован не штрихкод.");
		Возврат;
	КонецЕсли;
КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаСканированияПриемТоваров(Штрихкод)
	Если Объект.ОжидаемаяНоменклатура.Количество() = 0 Тогда	
		Сообщить("Прежде чем добавить номенклатуру, необходимо выбрать документ 'Расходный ордер на товары'!");
		Возврат;	
	КонецЕсли;
	Сведения = НайтиНоменклатуруПоПризнаку(Штрихкод,);
	Если Сведения <> Неопределено Тогда
		НайденныеСтроки = Объект.ОжидаемаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		Сведения[0].Номенклатура, Сведения[0].Характеристика)); 
		Если НайденныеСтроки.Количество() = 0 Тогда	
			Ответ = Вопрос("Отсканированная позиция номенклатуры не соответствует ожидаемой номенклатуре...",РежимДиалогаВопрос.ДаНет, 0,, "Продолжить выполнение операции?"); 
			ОчиститьСообщения();
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				ДобавитьНоменклатуруВОтсканированную(Сведения);
				Возврат;
			КонецЕсли; 	
		Иначе	
			ДобавитьНоменклатуруВОтсканированную(Сведения);	
		КонецЕсли;
	Иначе
		Сообщить("Отсканирован неверный штрихкод / Номенклатуры с подобным штрихкодом не существует");
		Возврат;
	КонецЕсли;	
КонецПроцедуры   

&НаСервере
Функция НайтиНоменклатуруПоПризнаку(Штрихкод = Неопределено, Артикул = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ИСТИНА
	|	И ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура.Артикул = &Артикул";
	
	Если Штрихкод = Неопределено Тогда
	
		Текст = СтрЗаменить(Текст, "И ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод", "");	
	
	КонецЕсли;
	
	Если Артикул = Неопределено Тогда
	
		Текст = СтрЗаменить(Текст, "И ШтрихкодыНоменклатуры.Номенклатура.Артикул = &Артикул", "");	
	
	КонецЕсли; 
	
	Запрос.Текст = Текст;
	
	Выборка = Запрос.Выполнить().Выбрать();         
	МассивНоменклатуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
	
		Сведения = Новый Структура;
		Сведения.Вставить("Номенклатура", Выборка.Номенклатура);
		Сведения.Вставить("Характеристика", Выборка.Характеристика);
		Сведения.Вставить("ЕдиницаИзмерения", Выборка.НоменклатураЕдиницаИзмерения);
		Сведения.Вставить("Штрихкод", Выборка.Штрихкод);  
		Сведения.Вставить("Артикул", Выборка.НоменклатураАртикул);
		Сведения.Вставить("КоличествоБрака", 0);
		Сведения.Вставить("ПричинаБрака", Неопределено);
		МассивНоменклатуры.Добавить(Сведения);	
	
	КонецЦикла;
	
	Возврат МассивНоменклатуры;
			
КонецФункции // ()   

&НаКлиенте
Процедура ДобавитьНоменклатуруВОтсканированную(Сведения)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Сведения[0].Номенклатура);
	Если ЗначениеЗаполнено(Сведения[0].Характеристика) Тогда
		Отбор.Вставить("Характеристика", Сведения[0].Характеристика);		
	КонецЕсли;
	НайденныеСтроки = Объект.ОтсканированнаяНоменклатура.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
		СтрокаТЧ = Объект.ОтсканированнаяНоменклатура.Получить(НайденныеСтроки[0].НомерСтроки - 1);
		СтрокаТЧ.Количество = СтрокаТЧ.Количество + 1;  
		ВыделитьСтрокуТЧОТ(СтрокаТЧ);
		Возврат;
		
	КонецЕсли;
	
	СтрокаТЧ = Объект.ОтсканированнаяНоменклатура.Добавить();
	СтрокаТЧ.Штрихкод = Сведения[0].Штрихкод;
	СтрокаТЧ.Номенклатура = Сведения[0].Номенклатура;
	СтрокаТЧ.Характеристика = Сведения[0].Характеристика;
	СтрокаТЧ.ЕдиницаИзмерения = Сведения[0].ЕдиницаИзмерения;
	СтрокаТЧ.Артикул = Сведения[0].Артикул;
	СтрокаТЧ.Количество = СтрокаТЧ.Количество + 1;
	
	ВыделитьСтрокуТЧОТ(СтрокаТЧ);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыделитьСтрокуТЧОТ(СтрокаТЧ)  // ОТ = ОтсканированныеТовары

	ВыделенныеСтроки = Элементы.ОтсканированнаяНоменклатура.ВыделенныеСтроки;
	ВыделенныеСтроки.Очистить();
	ВыделенныеСтроки.Добавить(СтрокаТЧ.ПолучитьИдентификатор());                          
	// изменение 09.06.25
	Элементы.ОтсканированнаяНоменклатура.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();	

КонецПроцедуры


&НаКлиенте
Процедура ПодтвердитьПриемТоваров(Команда)
	
	Если Объект.ОжидаемаяНоменклатура.Количество() = 0 Тогда
		Сообщить("Прежде чем добавить номенклатуру, необходимо выбрать документ 'Расходный ордер на товары'!");
		Возврат;
	КонецЕсли;
	// проверка на заполненность ТЧ "Отсканированная номенклатура" 
	Если Объект.ОтсканированнаяНоменклатура.Количество() = 0 Тогда
		Сообщить("Табличная часть 'Отсканированная номенклатура' пуста..");
		Возврат;
	КонецЕсли; 

	ОжидаемаяНоменклатура = Объект.ОжидаемаяНоменклатура;
	ОтсканированнаяНоменклатура = Объект.ОтсканированнаяНоменклатура; 
	АдресТЗ = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыОткрытия = Новый Структура("АдресВременногоХранилища", АдресТЗ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРешениеПользователя", ЭтаФорма);
	
	ЕстьОтличия = СравнитьОжидаемуюИОтсканированнуюНоменклатуру(ОжидаемаяНоменклатура, ОтсканированнаяНоменклатура, АдресТЗ); 
	Если НЕ ЕстьОтличия Тогда
		НачатьСозданиеПриходногоОрдера();	
	Иначе
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКладовщикаОбновленное.Форма.ФормаПотдвержденияПриемаНоменклатуры",
		ПараметрыОткрытия,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;
		
КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьРешениеПользователя(Результат, ДП) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Сообщить("Отмена операции.");
		Возврат;	
	КонецЕсли;
	НачатьСозданиеПриходногоОрдера();	

КонецПроцедуры

&НаСервере
Функция СравнитьОжидаемуюИОтсканированнуюНоменклатуру(ОжидаемаяНоменклатура, ОтсканированнаяНоменклатура, Адрес = Неопределено)
	
	Результат = СравнитьТабличныеЧасти(ОжидаемаяНоменклатура.Выгрузить(), ОтсканированнаяНоменклатура.Выгрузить());
	Если Результат = Неопределено Тогда
		Возврат Ложь;	
	Иначе
    	ПоместитьВоВременноеХранилище(Результат, Адрес);
		Возврат Истина;
	КонецЕсли;
		
КонецФункции // () 

&НаСервере
Функция СравнитьТабличныеЧасти(ТЗ1, ТЗ2)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ1", ТЗ1);
	Запрос.УстановитьПараметр("ТЗ2", ТЗ2);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЗ1.Номенклатура КАК Номенклатура,
	               |	ТЗ1.Характеристика КАК Характеристика,
	               |	ТЗ1.Количество КАК Количество
	               |ПОМЕСТИТЬ врТЗ1
	               |ИЗ
	               |	&ТЗ1 КАК ТЗ1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЗ2.Номенклатура КАК Номенклатура,
	               |	ТЗ2.Характеристика КАК Характеристика,
	               |	ТЗ2.Количество КАК Количество
	               |ПОМЕСТИТЬ врТЗ2
	               |ИЗ
	               |	&ТЗ2 КАК ТЗ2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(врТЗ1.Номенклатура, врТЗ2.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(врТЗ1.Характеристика, врТЗ2.Характеристика) КАК Характеристика,
	               |	ЕСТЬNULL(врТЗ1.Количество, 0) КАК Кол1,
	               |	ЕСТЬNULL(врТЗ2.Количество, 0) КАК Кол2
				   |ПОМЕСТИТЬ втВР
	               |ИЗ
	               |	врТЗ1 КАК врТЗ1
	               |		ПОЛНОЕ СОЕДИНЕНИЕ врТЗ2 КАК врТЗ2
	               |		ПО врТЗ1.Номенклатура = врТЗ2.Номенклатура
	               |			И врТЗ1.Характеристика = врТЗ2.Характеристика
	               |			И врТЗ1.Количество = врТЗ2.Количество
				   |ГДЕ
	               |	(врТЗ1.Номенклатура ЕСТЬ NULL
	               |			ИЛИ врТЗ2.Номенклатура ЕСТЬ NULL)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втВР.Номенклатура КАК Номенклатура,
	               |	втВР.Характеристика КАК Характеристика,
	               |	ВЫБОР
	               |		КОГДА СУММА(втВР.Кол1 - втВР.Кол2) < 0
	               |			ТОГДА СУММА(втВР.Кол2 - втВР.Кол1)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Излишек,
	               |	ВЫБОР
	               |		КОГДА СУММА(втВР.Кол1 - втВР.Кол2) > 0
	               |			ТОГДА СУММА(втВР.Кол1 - втВР.Кол2)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Недостача
				   |ИЗ
	               |	втВР КАК втВР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втВР.Номенклатура,
	               |	втВР.Характеристика";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 0 Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции // ()

&НаКлиенте
Процедура НачатьСозданиеПриходногоОрдера()	
	
	Если Склады.Количество() > 1 Тогда 
		ДопПараметры = Новый Структура("Склады", Склады);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборСкладаПередПТ", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКладовщикаОбновленное.Форма.ФормаВыбораСкладовПередСозданиемРасходногоОрдера",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		Возврат;
	КонецЕсли;
	ПриходныйОрдер = СоздатьПриходныйОрдерНаТовары(); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустаяОбработкаОповещения", ЭтаФорма);
	ЭтаФорма.Закрыть(Истина);
	ПоказатьЗначение(ОписаниеОповещения, ПриходныйОрдер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаПередПТ(Выбор, ДП) Экспорт
	Если Выбор = Неопределено Тогда
	
		Сообщить("Не выбран склад.");
		Возврат;
	
	КонецЕсли;
	ПриходныйОрдер = СоздатьПриходныйОрдерНаТовары(Выбор); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустаяОбработкаОповещения", ЭтаФорма);
	ЭтаФорма.Закрыть(Истина);
	ПоказатьЗначение(ОписаниеОповещения, ПриходныйОрдер);		
	
КонецПроцедуры


&НаКлиенте
Процедура ПустаяОбработкаОповещения(Ответ, ДП) Экспорт 
	ЭтаФорма.ОбновитьОтображениеДанных();
	Возврат;	
КонецПроцедуры

&НаСервере
Функция СоздатьПриходныйОрдерНаТовары(ВыбранныйСклад = Неопределено)
	
	Если Склады.Количество() = 0 Тогда
		Сообщить("Поле 'Склад' не заполнено. Вернитесь на начальную страницу.");
		Возврат Неопределено;
	КонецЕсли; 
	
	НовыйПриходныйОрдерНаТовары = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	// заполняем реквизиты и ТЧ новосозданного документа
	
	//видимые реквизиты
	НовыйПриходныйОрдерНаТовары.Дата = ТекущаяДата();
	НовыйПриходныйОрдерНаТовары.Отправитель = СкладОтправитель; 
	Если ВыбранныйСклад <> Неопределено Тогда
		
		НовыйПриходныйОрдерНаТовары.Склад = ВыбранныйСклад;
		
	Иначе
		
		НовыйПриходныйОрдерНаТовары.Склад = Склады[0].Значение;	
		
	КонецЕсли;
	НовыйПриходныйОрдерНаТовары.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
	НовыйПриходныйОрдерНаТовары.Ответственный = Пользователи.ТекущийПользователь(); 
	НовыйПриходныйОрдерНаТовары.Распоряжение = Распоряжение;
	НовыйПриходныйОрдерНаТовары.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	Для каждого СтрЛевТЧ Из Объект.ОтсканированнаяНоменклатура Цикл
		
		ПолученныеДанные = ПолучитьНеобходимыеДанныеДляНПОНТ(СтрЛевТЧ.Номенклатура, СтрЛевТЧ.Характеристика);
		
		// видимые реквизиты ТЧ Товары
		СтрТЧНПОНТ = НовыйПриходныйОрдерНаТовары.Товары.Добавить();	
		СтрТЧНПОНТ.Штрихкод = ПолученныеДанные.Штрихкод;
		//СтрТЧНПОНТ.Артикул = ПолученныеДанные.Артикул;
		СтрТЧНПОНТ.Номенклатура = СтрЛевТЧ.Номенклатура;
		СтрТЧНПОНТ.Характеристика = СтрЛевТЧ.Характеристика;
		СтрТЧНПОНТ.Упаковка = СтрЛевТЧ.ЕдиницаИзмерения;
		СтрТЧНПОНТ.Количество = СтрЛевТЧ.Количество;
		СтрТЧНПОНТ.КоличествоУпаковок = СтрЛевТЧ.Количество;
		СтрТЧНПОНТ.ПХ_КоличествоБрак = СтрЛевТЧ.КоличествоБрака;
		СтрТЧНПОНТ.ПХ_ПричинаБрака = СтрЛевТЧ.ПричинаБрака;
		
	КонецЦикла;
	
	Попытка
		
		НовыйПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Попытка
		
		ЗаполнитьРНТоварыНаСкладах(НовыйПриходныйОрдерНаТовары);	
		
		Исключение
			
		Ошибка = ИнформацияОбОшибке();
		
		Сообщить("Не удалось записать сведения в регистр накопления! Пожалуйста перепроведите созданный документ в ручную! Причина: " + Ошибка.Описание);
			
		КонецПопытки;
		
		Сообщить("Документ " + Строка(НовыйПриходныйОрдерНаТовары.Ссылка) + " успешно создан и проведен!");
		
		Возврат НовыйПриходныйОрдерНаТовары.Ссылка;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		НовыйПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Сообщить("Документ " + Строка(НовыйПриходныйОрдерНаТовары.Ссылка) + " успешно создан, однако провести его не удалось по причине: " + Символы.ПС 
		+ Ошибка.Описание);
		
		Возврат НовыйПриходныйОрдерНаТовары.Ссылка;
		
	КонецПопытки; 
	
КонецФункции

&НаСервере
Функция ПолучитьНеобходимыеДанныеДляНПОНТ(НоменклатураСсылка, ХарактеристикаСсылка)
	
	НеобходимыеДанные = Новый Структура;
	ШтрихкодНом = НайтиШтрихкодНоменклатуры(НоменклатураСсылка, ХарактеристикаСсылка); // СКОРЕЕ ВСЕГО НЕВЕРНО, Т.К. БУДЕТ РАБОТАТЬ СКАННЕР ШК И ОТТУДА БУДУТ НАХОДИТЬСЯ ДАННЫЕ
	
	НеобходимыеДанные.Вставить("Артикул", НоменклатураСсылка.Артикул);
	//Сообщить(НомОб);
	//Сообщить(НомОб.Ссылка);
	//Сообщить(НомОб.Артикул);
	//Сообщить(НомОб.Ссылка.Артикул);
	НеобходимыеДанные.Вставить("Штрихкод", ШтрихкодНом);
	Возврат НеобходимыеДанные;
	
КонецФункции // ()   

&НаСервере
Процедура ЗаполнитьРНТоварыНаСкладах(Документ) 
	НаборЗаписей = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ.Ссылка);
	Для каждого СтрТЧ Из Документ.Товары Цикл
		
		Запись = НаборЗаписей.ДобавитьПриход();
		Запись.Период = Документ.Дата;
		Запись.Регистратор = Документ.Ссылка;
		//Запись.НомерСтроки = СтрТЧ.НомерСтроки;
		Запись.Номенклатура = СтрТЧ.Номенклатура;
		Запись.Характеристика = СтрТЧ.Характеристика;
		Запись.Склад = Документ.Склад; 
		ВНаличииТек = НайтиКолвоТовараНаСкладе(СтрТЧ.Номенклатура, СтрТЧ.Характеристика, Документ.Склад);
		Запись.ВНаличии = ВНаличииТек + СтрТЧ.Количество;
		
	КонецЦикла;	
	НаборЗаписей.Записать();
КонецПроцедуры 

&НаСервере
Функция НайтиКолвоТовараНаСкладе(Номенклатура, Характеристика, Склад)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика); 
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура = &Номенклатура
	               |	И ТоварыНаСкладахОстатки.Характеристика = &Характеристика
	               |	И ТоварыНаСкладахОстатки.Склад = &Склад
				   |";
	Результат = Запрос.Выполнить().Выгрузить(); 
	Если Результат.Количество() = 0 Тогда
	
		Возврат 0;	
	
	КонецЕсли;
	Возврат Результат[0].ВНаличииОстаток;

КонецФункции // ()

&НаКлиенте
Процедура ОжидаемаяНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//Сообщить("test");
	Отбор = Новый Структура;
	Отбор.Вставить("Штрихкод", Элемент.ТекущиеДанные.Штрихкод);
	Отбор.Вставить("Артикул", Элемент.ТекущиеДанные.Артикул);
	Отбор.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика", Элемент.ТекущиеДанные.Характеристика); 
	Отбор.Вставить("Количество", Элемент.ТекущиеДанные.Количество);
	Отбор.Вставить("ЕдиницаИзмерения", Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	Отбор.Вставить("КоличествоБрака", Элемент.ТекущиеДанные.КоличествоБрака);
	Отбор.Вставить("ПричинаБрака", Элемент.ТекущиеДанные.ПричинаБрака);
	ТочнаяКопияПрисутствует = НайтиТочнуюКопиюСтроки("ОтсканированнаяНоменклатура", Отбор);
	Если НЕ ТочнаяКопияПрисутствует Тогда
		ДобавитьСтрокуВТЧОтсканированнаяНоменклатура(Элемент.ТекущиеДанные);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция НайтиТочнуюКопиюСтроки(ТабличнаяЧасть, ПараметрыОтбора)

	НайденныеСтроки = Объект[ТабличнаяЧасть].НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
	
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;

КонецФункции // ()

&НаСервере
Функция ОтсканированнаяНоменклатураШтрихкодПриИзмененииНаСервере(Штрихкод)
	НайденнаяНоменклатура = НайтиНоменклатуруПоПризнаку(Штрихкод,);
	Если НайденнаяНоменклатура.Количество() >= 1 Тогда
		Возврат НайденнаяНоменклатура;		
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОтсканированнаяНоменклатураШтрихкодПриИзменении(Элемент)
	НайденнаяНоменклатураПоШК = ОтсканированнаяНоменклатураШтрихкодПриИзмененииНаСервере(Элемент.ТекстРедактирования);
	Если НайденнаяНоменклатураПоШК = Неопределено Тогда
		Сообщить("Номенклатуры с таким штрихкодом не существует.");
		Возврат;	
	КонецЕсли;
	// открываем форму выбора номенклатуры, если больше > 1
	Если НайденнаяНоменклатураПоШК.Количество() > 1 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивНоменклатуры", НайденнаяНоменклатураПоШК);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПользователя", ЭтаФорма);
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКладовщикаОбновленное.Форма.ФормаВыбораНоменклатуры",
		ПараметрыОткрытия,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		
		// записываем данные в строку ТЧ "ОтсканированнаяНоменклатура"
		//Сообщить("test");
		ДобавитьСтрокуВТЧОтсканированнаяНоменклатура(НайденнаяНоменклатураПоШК[0], Истина);
	
	КонецЕсли;
КонецПроцедуры   

&НаКлиенте
Процедура ДобавитьСтрокуВТЧОтсканированнаяНоменклатура(Данные, Операция = Неопределено)
				
	СтрТЧ = ?(Операция <> Неопределено, 
	Объект.ОтсканированнаяНоменклатура[Элементы.ОтсканированнаяНоменклатура.ТекущиеДанные.НомерСтроки - 1],
	Объект.ОтсканированнаяНоменклатура.Добавить());	
	СтрТЧ.Штрихкод = Данные.Штрихкод;
	СтрТЧ.Артикул = Данные.Артикул;
	СтрТЧ.Номенклатура = Данные.Номенклатура; 
	СтрТЧ.Характеристика = Данные.Характеристика;
	СтрТЧ.Количество = СтрТЧ.Количество + 1;
	СтрТЧ.ЕдиницаИзмерения = Данные.ЕдиницаИзмерения; 
	СтрТЧ.КоличествоБрака = Данные.КоличествоБрака;
	СтрТЧ.ПричинаБрака = Данные.ПричинаБрака;	
	
КонецПроцедуры


&НаСервере
Функция ОтсканированнаяНоменклатураАртикулПриИзмененииНаСервере(Артикул)
	НайденнаяНоменклатура = НайтиНоменклатуруПоПризнаку(, Артикул);
	Если НайденнаяНоменклатура.Количество() >= 1 Тогда
		Возврат НайденнаяНоменклатура;		
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ОтсканированнаяНоменклатураАртикулПриИзменении(Элемент)
	НайденнаяНоменклатураПоАртикулу = ОтсканированнаяНоменклатураАртикулПриИзмененииНаСервере(Элемент.ТекстРедактирования);
	Если НайденнаяНоменклатураПоАртикулу = Неопределено Тогда
		Сообщить("Номенклатуры с таким артикулом не существует.");
		Возврат;	
	КонецЕсли;
	// открываем форму выбора номенклатуры, если больше > 1
	Если НайденнаяНоменклатураПоАртикулу.Количество() > 1 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивНоменклатуры", НайденнаяНоменклатураПоАртикулу);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПользователя", ЭтаФорма);
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКладовщикаОбновленное.Форма.ФормаВыбораНоменклатуры",
		ПараметрыОткрытия,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		
		// записываем данные в строку ТЧ "ОтсканированнаяНоменклатура"
		//Сообщить("test");
		ДобавитьСтрокуВТЧОтсканированнаяНоменклатура(НайденнаяНоменклатураПоАртикулу[0], Истина);
	
	КонецЕсли;
КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьВыборНоменклатурыПользователя(Результат, ДопПараметры) Экспорт

	//Сообщить("test");	
    ДобавитьСтрокуВТЧОтсканированнаяНоменклатура(Результат, Истина);
	
КонецПроцедуры


